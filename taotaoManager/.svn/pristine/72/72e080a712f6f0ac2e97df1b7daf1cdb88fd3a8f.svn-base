package com.taotao.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.joda.time.DateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.taotao.commons.EUdatePage;
import com.taotao.commons.TreeNode;
import com.taotao.commons.ftp.FtpUtil;
import com.taotao.commons.ftp.IDUtils;
import com.taotao.mapper.TbItemCatMapper;
import com.taotao.mapper.TbItemMapper;
import com.taotao.pojo.TbItem;
import com.taotao.pojo.TbItemCat;
import com.taotao.pojo.TbItemCatExample;
import com.taotao.pojo.TbItemCatExample.Criteria;
import com.taotao.pojo.TbItemExample;

@Service
public class showItemImpl implements showItem{
	
	@Value("${FTP_ADDRESS}")
	private String FTP_ADDRESS;
	@Value("${FTP_PORT}")
	private Integer FTP_PORT;
	@Value("${FTP_USERNAME}")
	private String FTP_USERNAME;
	@Value("${FTP_PASSWORD}")
	private String FTP_PASSWORD;
	@Value("${FTP_BASE_PATH}")
	private String FTP_BASE_PATH;
	@Value("${IMAGE_BASE_URL}")
	private String IMAGE_BASE_URL;
	
    @Autowired
    private TbItemMapper tbItemMapper;
    
    @Autowired
    private TbItemCatMapper tbItemCatMapper;
    
    //选择
	public TbItem select(long tbitemId) {
		return tbItemMapper.selectByPrimaryKey(tbitemId);
	}
	
	
    //分页
	@Override
	public EUdatePage getsEUdatePage(int page, int rows) {
		TbItemExample example=new TbItemExample();
		//分页处理
		PageHelper.startPage(page, rows);
		//查询
		List<TbItem> list=tbItemMapper.selectByExample(example);
		EUdatePage result=new EUdatePage();
		result.setRows(list);
		//取值
		PageInfo<TbItem> pageInfo=new PageInfo<>(list);
		result.setTotal((int) pageInfo.getTotal());
		return result;
	}
	
	//添加的一个tree图
	@Override
	public List<TreeNode> getItemsList(long id) {
		TbItemCatExample example=new TbItemCatExample();
		//设置查询的条件
		Criteria criteria=example.createCriteria();
		criteria.andParentIdEqualTo(id);
		//执行查询
		List<TbItemCat> list=tbItemCatMapper.selectByExample(example);
		//转换成treenode可用列表
		List<TreeNode> result=new ArrayList<>();
		for (TbItemCat tbItemCat:list) {
			TreeNode treeNode=new TreeNode(tbItemCat.getId(),tbItemCat.getName(),
					tbItemCat.getIsParent()?"closed":"open");
			result.add(treeNode);
		}
		
		return result;
	}
	
	//上传图片
	@Override
	public Map putLoadPic(MultipartFile uploadFile) {
		Map resultMap = new HashMap<>();
		try {
			//生成一个新的文件名
			//取原始文件名
			String oldName = uploadFile.getOriginalFilename();
			//生成新文件名
			//UUID.randomUUID();
			String newName = IDUtils.genImageName();
			newName = newName + oldName.substring(oldName.lastIndexOf("."));
			//图片上传
			String imagePath = new DateTime().toString("/yyyy/MM/dd");
			boolean result = FtpUtil.uploadFile(FTP_ADDRESS, FTP_PORT, FTP_USERNAME, FTP_PASSWORD, 
					FTP_BASE_PATH, imagePath, newName, uploadFile.getInputStream());
			//返回结果
			if(!result) {
				resultMap.put("error", 1);
				resultMap.put("message", "文件上传失败");
				return resultMap;
			}
			resultMap.put("error", 0);
			resultMap.put("url", IMAGE_BASE_URL + imagePath + "/" + newName);
			return resultMap;
			
		} catch (Exception e) {
			resultMap.put("error", 1);
			resultMap.put("message", "文件上传发生异常");
			return resultMap;
		}
	}
	
   
}
