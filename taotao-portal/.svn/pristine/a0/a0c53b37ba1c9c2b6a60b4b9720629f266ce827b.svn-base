package csc.hfz.taotao.portalservice;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.taotao.commons.HttpClientUtil;
import com.taotao.commons.TaotaoResult;
import com.taotao.commons.ftp.CookieUtils;
import com.taotao.commons.ftp.JsonUtils;
import com.taotao.pojo.TbItem;

import csc.hfz.taotao.portalpojo.cartItem;

@Service
public class CartServiceImpl implements CartService {

	@Value("${REST_BASE_URL}")
	private String REST_BASE_URL;
	@Value("${ITME_INFO_URL}")
	private String ITME_INFO_URL;

	@Override
	public TaotaoResult addCartItem(HttpServletRequest request,
			HttpServletResponse response, long id, int num) {
		// 取商品信息
		cartItem cartItem = null;
		// 取购物车商品列表
		List<cartItem> itemList = getCartItemList(request);
		// 判断购物车商品列表中是否存在此商品
		for (cartItem cItem : itemList) {
			// 如果存在此商品
			if (cItem.getId() == id) {
				cItem.setNumber(cItem.getNumber() + num);
				cartItem = cItem;
				break;
			}
		}
		if (cartItem == null) {
			cartItem = new cartItem();
			// 根据商品id查询商品基本信息。
			String json = HttpClientUtil.doGet(REST_BASE_URL + ITME_INFO_URL
					+ id);
			// 把json转换成java对象
			TaotaoResult taotaoResult = TaotaoResult.formatToPojo(json,
					TbItem.class);
			if (taotaoResult.getStatus() == 200) {
				TbItem item = (TbItem) taotaoResult.getData();
				cartItem.setId(item.getId());
				cartItem.setTitle(item.getTitle());
				cartItem.setImage(item.getImage() == null ? "" : item.getImage().split(",")[0]);
				cartItem.setNumber(num);
				cartItem.setPrice(item.getPrice());
			}
			// 添加到购物车列表
			itemList.add(cartItem);
		}
		// 把购物车列表写入cookie
		CookieUtils.setCookie(request, response, "TT_CART",
				JsonUtils.objectToJson(itemList), true);

		return TaotaoResult.ok();
	}

	
	 //从cookie中取商品列表
	 
	private List<cartItem> getCartItemList(HttpServletRequest request) {
		// 从cookie中取商品列表
		String cartJson = CookieUtils.getCookieValue(request, "TT_CART", true);
		if (cartJson == null) {
			return new ArrayList<>();
		}
		// 把json转换成商品列表
		try {
			List<cartItem> list = JsonUtils
					.jsonToList(cartJson, cartItem.class);
			return list;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ArrayList<>();
	}
    
	//获取购物车
	@Override
	public List<cartItem> getCartItemslist(HttpServletRequest request,
			HttpServletResponse response) {
		List<cartItem> list = getCartItemList(request);
		return list;
	}
	
	//删除商品
	@Override
	public TaotaoResult deleteCartItem(long itemId, HttpServletRequest request, HttpServletResponse response) {
		//从cookie中取购物车商品列表
		List<cartItem> itemList = getCartItemList(request);
		//从列表中找到此商品
		for (cartItem cartItem : itemList) {
			if (cartItem.getId() == itemId) {
				itemList.remove(cartItem);
				break;
			}
				 
		}
		//把购物车列表重新写入cookie
		CookieUtils.setCookie(request, response, "TT_CART", JsonUtils.objectToJson(itemList), true);
		
		return TaotaoResult.ok();
	}

}
